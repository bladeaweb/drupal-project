# {{ project }}
developed by drunomics GmbH, office@drunomics.com

This project is maintained using composer. Please refer to the documentation provided at https://github.com/drupal-composer/drupal-project and https://www.drupal.org/node/2471553.

## Project setup

 * Run `vagrant up` (see Vagrant section below).
 * Initialize settings.php and dotenv:
   ```
   composer install
   ./vendor/bin/phapp setup vagrant
   ```

 * If you cannot use the drunomics vagrant environment, you need to customize
   the provided settings.php. Instead of linking the settings.vagrant.php, copy
   it to settings.php and customize it to your needs. Usually, you'd have to
   customize the database connection and the 'trusted_host_patterns'.

## drunomics setup notes

- The vagrant setup is added in the project, thus no special setup is required.
- The drunomics drush extension is *not* added to the project. It's deprecated.
- For managing the project use the respective phapp comands, see
  http://github.com/drunomics/phapp-cli and or run `./vendor/bin/phapp list` for
  an overview.

## Command line tools

### Phapp
Version 0.6.2 or later is required. Either install it globally and run `phapp`
or execute the embedded phapp version from the root repository directory:

```./vendor/bin/phapp ```

*Note*:
If phapp is not installed globally, `./vendor/bin/phapp` must be used instead of
just `phapp` always.

Refer to [the project page](http://github.com/drunomics/phapp-cli) for
instructions on how to install phapp globally.

### Drush
 To run drush, execute from the root repository directory:
 ```./vendor/bin/drush ```

 The more convenient alternative is to install a global launcher or a global
 drush with version 8, which includes a global launcher. Then, drush picks up
 the project-local drush automatically.
 For docs on drush see http://docs.drush.org/en/master/.

## Useful commands

- Commands for setting up or updating the project:

```
# Initialize the setup.
phapp setup vagrant

# Initialize the application, after building it:
phapp init

# Update the build and run updates after switching branches:
phapp update

# Install from scratch.
phapp install
```

If composer install has been run and one wants to skip building again during
init or update, one can pass the --no-build option like so:

```
composer install
phapp init --no-build
phapp update --no-build
```

The commands executed can be found in `phapp.yml`.

*Note*: If phapp is not installed globally or missing, refer to the "Phapp"
section under "Command line tools" above.

- During development, some useful commands are:

```
# Config export (export your config changes):
drush cex -y

# Config import (manual import of config files):
drush cim -y

# Cache clear/rebuild:
drush cr
```

## Running tests

Tests are implemented using behat. To run all tests, a recent chrome browser
(59+) that is used for headless tests.

To run the tests in the vagrant environment the following commands can be used:

    ./tests/behat/run.sh

Any further arguments are forwarded to behat:

    ./tests/behat/run.sh --tags=javascript

By default chrome is shown. To run it in headless mode use:

    HEADLESS=1 ./tests/behat/run.sh

## Coding style

To check the coding style for the project's custom code, run PHP code sniffer:

    composer cs

To automatically fix the coding style errors (as far as possible), run the PHP
code beautifier:

    composer cbf

### Pre-commit checks

Coding style can be checked automatically via Git's pre-commit hooks. To do so, just make sure to run the script `devsetup/setup-git-config.sh` at least once.

Once configured, running pre-commit hooks can be bypassed via the Git commmit
`--no-verify` option.

### PHPstorm coding style configuration

Configure the following settings:
* Under Languages / PHP / Code Sniffer
  - Select "local" configuration and make it point to `vendor/bin/phpcs`).
* Under Editor / Inspections / PHP Code Sniffer validation:
  - Select "warning" as severity.
  - Show warnings as "warning"
  - Show sniff name "true"
  - Coding standard: "custom", make it point to the phpcs.xml.dist file in the
    vcs root.

## Vagrant

The following describes the local development using Vagrant.

### Prerequesites
 
 - Make sure latest docker and vagrant versions are installed.
 - Make sure necessary vagrant plugins are installed:
 
       vagrant plugin install vagrant-hosts-provisioner

### Using vagrant

  You can access the site http://{{ project }}.local. The project name is
  defined in devsetup/project.yml.

 * vagrant up - Starts the container.
 * vagrant halt - Stops the container
 * vagrant reload - Restarts the container.
 * vagrant provision - Provisions the container again.
